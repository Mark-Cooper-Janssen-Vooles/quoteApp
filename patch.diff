diff --git a/Domain/Models/Quote/Contact.cs b/Domain/Models/Quote/Contact.cs
index dcc6091..4d84444 100644
--- a/Domain/Models/Quote/Contact.cs
+++ b/Domain/Models/Quote/Contact.cs
@@ -7,10 +7,11 @@ namespace Domain.Models.Quote
         public string Name { set; get; }
         public string Email { set; get; }
 
-        public Contact() { }
-
         public Contact(string name, string email)
         {
+            if (string.IsNullOrEmpty(email))
+                throw new Exception("Please provide email");
+            
             Name = name;
             Email = email;
         }
diff --git a/QuoteAPI.Tests/RepositoryTests.cs b/QuoteAPI.Tests/RepositoryTests.cs
new file mode 100644
index 0000000..91986ac
--- /dev/null
+++ b/QuoteAPI.Tests/RepositoryTests.cs
@@ -0,0 +1,64 @@
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using Amazon.DynamoDBv2.Model;
+using Domain.Models.Quote;
+using QuoteAPI.DataAccessLayer;
+using Xunit;
+
+namespace QuoteAPI.Tests
+{
+    public class RepositoryTests
+    {
+        [Fact]
+        public void GivenNoQuotesExist_WhenGetQuotes_ReturnsEmptyList()
+        {
+            var repo = new QuoteRepository();
+            IEnumerable quotes = repo.GetQuotes();
+            Assert.Empty(quotes);
+        }
+        
+        [Fact]
+        public void GivenQuotesExist_WhenGetQuotes_ReturnsQuotes()
+        {
+            var fakeDynamo = new FakeDynamo();
+            var repo = new QuoteRepository();
+            var quote = new Quote(Guid.NewGuid(), new List<Item>(), new Contact("Matt", "matt.birman@xero.com")); 
+            repo.Save(quote);
+            
+            var expected = new List<Quote>()
+            {
+                quote
+            };
+            
+            IEnumerable quotes = repo.GetQuotes();
+            Assert.Equal(expected, quotes);
+        }
+    }
+
+    public class FakeDynamo : IDynamoDbClient
+    {
+        private IDictionary<Guid, Quote> _quotes;
+
+        public FakeDynamo(IDictionary<Guid, Quote> quotes)
+        {
+            _quotes = quotes;
+        }
+
+        public IEnumerable<Quote> GetItem(GetItemRequest request)
+        {
+            throw new NotImplementedException();
+        }
+
+        public QueryResponse Query(QueryRequest request)
+        {
+            return new QueryResponse()
+            {
+                Items = new List<Dictionary<string, AttributeValue>>
+                {
+                    {}
+                }
+            };
+        }
+    }
+}
\ No newline at end of file
diff --git a/QuoteAPI/Controllers/QuoteController.cs b/QuoteAPI/Controllers/QuoteController.cs
index 0785484..d673cc6 100644
--- a/QuoteAPI/Controllers/QuoteController.cs
+++ b/QuoteAPI/Controllers/QuoteController.cs
@@ -1,4 +1,5 @@
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Text;
 using System.Threading.Tasks;
@@ -35,7 +36,8 @@ namespace QuoteAPI
         [HttpPost("quotes")]
         public void CreateQuote(Contact contactRequest)
         {
-            _repository.CreateQuote(contactRequest);
+            var quote = new Quote(Guid.NewGuid(), new List<Item>(), contactRequest);
+            _repository.Save(quote);
         }
 
         // api/quote/quotes/{id}/draft-item
diff --git a/QuoteAPI/DataAccessLayer/IRepository.cs b/QuoteAPI/DataAccessLayer/IRepository.cs
index 8b5abd4..0940a98 100644
--- a/QuoteAPI/DataAccessLayer/IRepository.cs
+++ b/QuoteAPI/DataAccessLayer/IRepository.cs
@@ -7,7 +7,6 @@ namespace QuoteAPI.DataAccessLayer
     public interface IRepository
     {
         IEnumerable<Quote> GetQuotes();
-        void CreateQuote(Contact contact);
         Quote GetQuote(Guid id);
         void Save(Quote quote);
         void DeleteQuote(Guid id);
diff --git a/QuoteAPI/DataAccessLayer/QuoteRepository.cs b/QuoteAPI/DataAccessLayer/QuoteRepository.cs
new file mode 100644
index 0000000..ff6de29
--- /dev/null
+++ b/QuoteAPI/DataAccessLayer/QuoteRepository.cs
@@ -0,0 +1,64 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Amazon.DynamoDBv2.Model;
+using Domain.Models.Quote;
+using Newtonsoft.Json;
+
+namespace QuoteAPI.DataAccessLayer
+{
+    public class QuoteRepository : IRepository
+    {
+        private readonly IDynamoDbClient _dynamoDbClient;
+
+        public QuoteRepository(IDynamoDbClient dynamoDbClient) // every time i hit the endpoints it comes here??? just want to inject this once and have it in memory
+        {
+            _dynamoDbClient = dynamoDbClient;
+        }
+
+        public IEnumerable<Quote> GetQuotes()
+        {
+            var request = new QueryRequest
+            {
+                TableName = "quoteDB3",
+                KeyConditionExpression = "type = :v_type",
+                ExpressionAttributeValues = new Dictionary<string, AttributeValue>
+                {
+                    {":v_type", new AttributeValue { S ="quote" }}
+                },
+                Limit = 10
+            };
+            var queryResponse = _dynamoDbClient.Query(request);
+            var quotes = queryResponse.Items.Select(x => JsonConvert.DeserializeObject<Quote>(x["entity"].S));
+            return quotes;
+        }
+
+        public Quote GetQuote(Guid id)
+        {
+            try
+            {
+                return _quotes[id];
+            }
+            catch
+            {
+                return new Quote(Guid.Empty, new List<Item>(), new Contact("", ""));
+            }
+        }
+
+        public void Save(Quote quote)
+        {
+            _quotes[quote.Id] = quote;
+        }
+
+        public void DeleteQuote(Guid id)
+        {
+            _quotes.Remove(id);
+        }
+    }
+
+    public interface IDynamoDbClient
+    {
+        IEnumerable<Quote> GetItem(GetItemRequest request);
+        QueryResponse Query(QueryRequest request);
+    }
+}
\ No newline at end of file
diff --git a/QuoteAPI/DataAccessLayer/Repository.cs b/QuoteAPI/DataAccessLayer/Repository.cs
deleted file mode 100644
index d2f721f..0000000
--- a/QuoteAPI/DataAccessLayer/Repository.cs
+++ /dev/null
@@ -1,65 +0,0 @@
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using Domain.Models.Quote;
-
-namespace QuoteAPI.DataAccessLayer
-{
-    public class Repository : IRepository
-    {
-        private readonly Dictionary<Guid, Quote> _quotes;
-
-        public Repository() // every time i hit the endpoints it comes here??? just want to inject this once and have it in memory
-        {
-            _quotes = new Dictionary<Guid, Quote>();
-            AddSeededQuote(); // seeding some data, remove this eventually
-        }
-
-        public Repository(List<Quote> quotes)
-        {
-            _quotes =  quotes.ToDictionary(x => x.Id);;
-        }
-
-        private void AddSeededQuote()
-        {
-            var guid = new Guid("5233fecd-1320-4916-a5ba-f2c829d19e63");
-            var seedItems = new List<Item>() {new Item("Seeded quote", 12.99)};
-            var seedContact = new Contact("mark", "test@test.com");
-            var quote = new Quote(guid, seedItems, seedContact);
-            _quotes.Add(guid,quote);
-        }
-
-        public IEnumerable<Quote> GetQuotes()
-        {
-            return _quotes.Select(pair => pair.Value);
-        }
-
-        public void CreateQuote(Contact contact)
-        {
-            var guid = Guid.NewGuid();
-            _quotes.Add(guid, new Quote(guid, new List<Item>(), contact));
-        }
-
-        public Quote GetQuote(Guid id)
-        {
-            try
-            {
-                return _quotes[id];
-            }
-            catch
-            {
-                return new Quote(Guid.Empty, new List<Item>(), new Contact("", ""));
-            }
-        }
-
-        public void Save(Quote quote)
-        {
-            _quotes[quote.Id] = quote;
-        }
-
-        public void DeleteQuote(Guid id)
-        {
-            _quotes.Remove(id);
-        }
-    }
-}
\ No newline at end of file
diff --git a/QuoteAPI/EventBus/SqsClient.cs b/QuoteAPI/EventBus/SqsClient.cs
index 1fe13f6..ab361ed 100644
--- a/QuoteAPI/EventBus/SqsClient.cs
+++ b/QuoteAPI/EventBus/SqsClient.cs
@@ -14,7 +14,7 @@ namespace QuoteAPI
             _amazonSqsClient = new AmazonSQSClient(RegionEndpoint.APSoutheast2);
         }
 
-        public  Task SendMessageAsync(SendMessageRequest request)
+        public Task SendMessageAsync(SendMessageRequest request)
         {
             return _amazonSqsClient.SendMessageAsync(request);
         }
diff --git a/QuoteAPI/QuoteAPI.csproj b/QuoteAPI/QuoteAPI.csproj
index 00397a9..adefeff 100644
--- a/QuoteAPI/QuoteAPI.csproj
+++ b/QuoteAPI/QuoteAPI.csproj
@@ -5,6 +5,7 @@
     </PropertyGroup>
 
     <ItemGroup>
+      <PackageReference Include="AWSSDK.DynamoDBv2" Version="3.7.0.97" />
       <PackageReference Include="AWSSDK.SQS" Version="3.7.0.35" />
       <PackageReference Include="MediatR" Version="9.0.0" />
       <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.0" />
diff --git a/QuoteAPI/Startup.cs b/QuoteAPI/Startup.cs
index e0ab431..81debc5 100644
--- a/QuoteAPI/Startup.cs
+++ b/QuoteAPI/Startup.cs
@@ -36,7 +36,7 @@ namespace QuoteAPI
             });
             services.AddControllers().AddNewtonsoftJson();
             services.AddScoped<IEventBus, EventBus>();
-            services.AddSingleton<IRepository, Repository>();
+            services.AddSingleton<IRepository, QuoteRepository>();
             services.AddSingleton<ISqsClient, SqsClient>();
         }
 
diff --git a/quoteAPI.sln.DotSettings.user b/quoteAPI.sln.DotSettings.user
index 0c949b2..76462a8 100644
--- a/quoteAPI.sln.DotSettings.user
+++ b/quoteAPI.sln.DotSettings.user
@@ -2,28 +2,34 @@
 	<s:String x:Key="/Default/Environment/AssemblyExplorer/XmlDocument/@EntryValue">&lt;AssemblyExplorer&gt;&#xD;
   &lt;Assembly Path="C:\Users\mark.janssen-vooles\.nuget\packages\mediatr\9.0.0\lib\netstandard2.1\MediatR.dll" /&gt;&#xD;
 &lt;/AssemblyExplorer&gt;</s:String>
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=09a8f419_002Dbb7c_002D41da_002D8ff1_002D4bc01ea3d304/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="EventBusTests" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
-  &lt;TestAncestor&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.EventBusTests&lt;/TestId&gt;&#xD;
-  &lt;/TestAncestor&gt;&#xD;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=09a8f419_002Dbb7c_002D41da_002D8ff1_002D4bc01ea3d304/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="EventBusTests" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;TestAncestor&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.EventBusTests&lt;/TestId&gt;
+  &lt;/TestAncestor&gt;
 &lt;/SessionState&gt;</s:String>
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=1e3eba36_002D01b1_002D4fb6_002Dba5b_002D8f5d061cf1c8/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="EventBusTests #2" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
-  &lt;TestAncestor&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.EventBusTests&lt;/TestId&gt;&#xD;
-  &lt;/TestAncestor&gt;&#xD;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=1e3eba36_002D01b1_002D4fb6_002Dba5b_002D8f5d061cf1c8/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="EventBusTests #2" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;TestAncestor&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.EventBusTests&lt;/TestId&gt;
+  &lt;/TestAncestor&gt;
 &lt;/SessionState&gt;</s:String>
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=298b4f8b_002Db9f1_002D4b7b_002Db53b_002De0ee0fa3ab0a/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
-  &lt;Project Location="C:\Users\mark.janssen-vooles\code\tutorials\Matt_DDD2\quoteAPI\QuoteAPI.Tests" Presentation="&amp;lt;QuoteAPI.Tests&amp;gt;" /&gt;&#xD;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=298b4f8b_002Db9f1_002D4b7b_002Db53b_002De0ee0fa3ab0a/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;Project Location="C:\Users\mark.janssen-vooles\code\tutorials\Matt_DDD2\quoteAPI\QuoteAPI.Tests" Presentation="&amp;lt;QuoteAPI.Tests&amp;gt;" /&gt;
 &lt;/SessionState&gt;</s:String>
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=2e2e72fc_002D7a83_002D4d3e_002Da7d2_002Dc9a3d15efcc5/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem #2" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
-  &lt;TestAncestor&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.QuoteTest.GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem&lt;/TestId&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.UnitTest1&lt;/TestId&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.QuoteTest&lt;/TestId&gt;&#xD;
-  &lt;/TestAncestor&gt;&#xD;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=2e2e72fc_002D7a83_002D4d3e_002Da7d2_002Dc9a3d15efcc5/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem #2" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;TestAncestor&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.QuoteTest.GivenQuoteWithValidItem_WhenAddItem_ThenHaveOnlyOneItem&lt;/TestId&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.UnitTest1&lt;/TestId&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.QuoteTest&lt;/TestId&gt;
+  &lt;/TestAncestor&gt;
 &lt;/SessionState&gt;</s:String>
-	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=3cff7a9f_002Da112_002D4d2f_002D9603_002De4ff69ff48bf/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="UnitTest1" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;&#xD;
-  &lt;TestAncestor&gt;&#xD;
-    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.UnitTest1&lt;/TestId&gt;&#xD;
-  &lt;/TestAncestor&gt;&#xD;
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=3cff7a9f_002Da112_002D4d2f_002D9603_002De4ff69ff48bf/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" Name="UnitTest1" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;TestAncestor&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.UnitTest1&lt;/TestId&gt;
+  &lt;/TestAncestor&gt;
+&lt;/SessionState&gt;</s:String>
+	<s:String x:Key="/Default/Environment/UnitTesting/UnitTestSessionStore/Sessions/=d9e73d86_002De487_002D48c3_002Dbd4a_002D091577b1a1a0/@EntryIndexedValue">&lt;SessionState ContinuousTestingMode="0" IsActive="True" Name="GivenNoQuotesExist_WhenGetQuotes_ReturnsEmptyList" xmlns="urn:schemas-jetbrains-com:jetbrains-ut-session"&gt;
+  &lt;TestAncestor&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.RepositoryTests.GivenNoQuotesExist_WhenGetQuotes_ReturnsEmptyList&lt;/TestId&gt;
+    &lt;TestId&gt;xUnit::58383C51-52D2-4A07-8568-77A145B1FD98::.NETCoreApp,Version=v3.1::QuoteAPI.Tests.RepositoryTests.GivenQuotesExist_WhenGetQuotes_ReturnsQuotes&lt;/TestId&gt;
+  &lt;/TestAncestor&gt;
 &lt;/SessionState&gt;</s:String></wpf:ResourceDictionary>
\ No newline at end of file
